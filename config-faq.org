** Common packages
*** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
*** Restart emacs
#+begin_src emacs-lisp
  (use-package restart-emacs
    :ensure t)
#+end_src
*** Show command log
#+begin_src emacs-lisp
  (use-package command-log-mode
    :ensure t)
#+end_src
*** Posframe
#+begin_src emacs-lisp
  (use-package posframe
    :ensure t)
#+end_src




*** manage minor mode
In case I want to see all the minor modes
#+begin_src emacs-lisp
  (use-package manage-minor-mode
    :ensure t)
#+end_src

** Pop win
#+begin_src emacs-lisp
  (use-package popwin
    :ensure t
    :config
    (global-set-key (kbd "M-p") popwin:keymap))
#+end_src
** Mini frame
Place minibuffer at the top of the current frame
#+begin_src emacs-lisp
  (use-package mini-frame
    :ensure t
    :config
    (mini-frame-mode t)
    (custom-set-variables
     '(mini-frame-show-parameters
       '((top . 10)
         (width . 0.7)
         (left . 0.5)))))
#+end_src
** Transpose frame
#+begin_src emacs-lisp
  (use-package transpose-frame
    :ensure t)
#+end_src

** TODO Reasonable default settings
*** Popup managment
Taken from https://emacs.stackexchange.com/questions/46210/reuse-help-window

#+begin_src emacs-lisp
  (setq display-buffer-alist
        `((,(rx bos (or "*Apropos*" "*Help*" "*helpful" "*info*" "*Summary*") (0+ not-newline))
           (display-buffer-reuse-mode-window display-buffer-below-selected)
           (window-height . 0.33)
           (mode apropos-mode help-mode helpful-mode Info-mode Man-mode))))
#+end_src
*** Minibuffer recursive
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src
*** Meta Key                                                          :@os:
make both command and option key to be meta key
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta
          mac-option-modifier 'meta))

  ;; (when (eq system-type 'gnu/linux)
  ;; (setq  x-meta-keysym 'super
  ;;       x-super-keysym 'meta))
#+end_src
*** Unset M-c
#+begin_src emacs-lisp
  (global-unset-key (kbd "M-c"))
#+end_src


** Misc
*** Highlight Indent guides

#+begin_src emacs-lisp
  (use-package indent-guide
    :ensure t)
  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :init
    ;; (setq highlight-indent-guides-method 'column)
    (setq highlight-indent-guides-method 'bitmap)
    ;; (setq highlight-indent-guides-character ?|)
    ;; (setq highlight-indent-guides-character ?❚)
    ;;(setq highlight-indent-guides-character ?‖)
    ;; (setq highlight-indent-guides-responsive 'stack)
    ;;(setq highlight-indent-guides-responsive 'top)
    ;; (setq highlight-indent-guides-auto-enabled nil)
    ;; (set-face-background 'highlight-indent-guides-odd-face "darkgray")
    ;; (set-face-background 'highlight-indent-guides-even-face "dimgray")
    ;; (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
    )
#+end_src

*** Display battery
#+begin_src emacs-lisp
  ;; (display-battery-mode 1)
  ;; (setq battery-mode-line-format "[%b%p%% %t]")
#+end_src
*** Dired icons
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src
*** Info colors
#+begin_src emacs-lisp
  (use-package info-colors
    :ensure t
    :config
    (add-hook 'Info-selection-hook 'info-colors-fontify-node))
#+end_src


** Tab bar
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :ensure t
    :init
    (setq centaur-tabs-set-icons t)
    (setq ccentaur-tabs-set-modified-marker t
          centaur-tabs-modified-marker "M"
          centaur-tabs-cycle-scope 'tabs)
    (setq centaur-tabs-set-close-button nil)
    :config
    (centaur-tabs-group-by-projectile-project)
    )
#+end_src

** Magnifying mode                                                 :@script:
#+begin_src emacs-lisp
  (defun magnifying-current-line ()
    (setq magnifying-overlay (make-overlay (line-beginning-position) (line-end-position)))
    (overlay-put magnifying-overlay 'font-lock-face '(:height 2.5)))

  (defun magnifying-delete-line ()
    (dolist (o (overlays-in  (line-beginning-position) (line-end-position)))
      (delete-overlay o)))

  (define-minor-mode magnifying-mode
    "Toggles global magnifying-mode."
    nil   ; Initial value, nil for disabled
    :global t
    :group 'magnifying
    :lighter " magnifying"
    :keymap
    (list
     (cons (kbd "C-c t") (lambda ()
                           (interactive)
                           (magnifying-current-line)))

     (cons (kbd "C-c m") (lambda ()
                           (interactive)
                           (magnifying-delete-line)))
     )

    (if magnifying-mode
        (message "magnifying-mode activated!")
      (message "magnifying-mode deactivated!")))

  (add-hook 'magnifying-mode-hook (lambda () (message "magnifying hook was executed!")))
  (add-hook 'magnifying-mode-on-hook (lambda () (message "magnifying turned on!")))
  (add-hook 'magnifying-mode-off-hook (lambda () (message "magnifying turned off!")))
#+end_src
