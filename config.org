#+TITLE: Emacs Config
#+AUTHOR: Teddy Ma
#+TOC: true
#+OPTIONS: num:nil \n:t
#+TAGS: @os @dependent @script
#+STARTUP: nohideblocks
#+SETUPFILE: http://www.songofcode.com/socss/org.setup

* Setup
** Make it easy to edit and reload this file                       :@script:

#+begin_src emacs-lisp
  (defun find-config ()
    "Edit config.org"
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (defun find-dotfiles ()
    "Edit dotfiles.org"
    (interactive)
    (find-file "~/.emacs.d/dotfiles.org"))
  (defun reload-config()
    "Reload config.org"
    (interactive)
    (delete-file "~/.emacs.d/config.el") ;; hotfix, manually delete old config.el file
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (global-set-key (kbd "C-c i") 'find-dotfiles)
  (global-set-key (kbd "C-c I") 'find-config)
  (global-set-key (kbd "C-c R") 'reload-config)
#+end_src

** Personal Information

#+begin_src emacs-lisp
  (setq user-full-name "Teddy Ma"
        user-mail-address "mlc880926@gmail.com")
#+end_src

** Bootstrap use-package
Guide about use-package https://phenix3443.github.io/notebook/emacs/modes/use-package-manual.html

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA Stable" . 5)
          ("MELPA"        . 0)))
  (package-initialize)
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  ;;(setq package-check-signature nil) ;; if ssl error occur, uncomment this line
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

** Load custom settings
Set up the customize file to its own separate file, instead of saving customize settings in [[file:init.el][init.el]].

Warning: edit config.org file will *not* affect custom.el file!

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

* UI
** Reasonable default settings
*** Y or N
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Terminal env                                                      :@os:
By default Emacs doesn't read from the same environment variables set in your terminal.
This package fixes that.
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :ensure t
    :hook (emacs-startup . (lambda ()
                             (setq exec-path-from-shell-arguments '("-l"))
                                          ; removed the -i for faster startup
                             (exec-path-from-shell-initialize))))
#+end_src

-i gets alias definitions from =.bash_profile=
#+begin_src emacs-lisp
  (setq shell-command-switch "-ic")
#+end_src

*** Always follow symlinks
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src
*** Alway use visual line
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src
*** Garbage collection
#+begin_src emacs-lisp
  (setq gc-cons-threshold 20000000)
#+end_src
*** No Visible Bell
#+begin_src emacs-lisp
  (setq visible-bell nil)
#+end_src
*** Hide UI bar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
    (setq ns-use-proxy-icon  nil)
    (setq frame-title-format nil)
    )
#+end_src
*** Hide the help screen on startup
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src
*** Highlight current line.
#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src
*** Popup managment
Taken from https://emacs.stackexchange.com/questions/46210/reuse-help-window

#+begin_src emacs-lisp
  (setq display-buffer-alist
        `((,(rx bos (or "*Apropos*" "*Help*" "*helpful" "*info*" "*Summary*") (0+ not-newline))
           (display-buffer-reuse-mode-window display-buffer-below-selected)
           (window-height . 0.33)
           (mode apropos-mode help-mode helpful-mode Info-mode Man-mode))))
#+end_src
*** Disable autosave and backup
#+begin_src emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
  (setq backup-inhibited t)
  (setq backup-directory-alist `(("." . "~/.saves")))
#+end_src

Move file to trash instead of removing.
#+begin_src emacs-lisp
  (setq-default delete-by-moving-to-trash t)
#+end_src
*** Auto refresh
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src
*** Minibuffer recursive
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src
*** Meta Key
make both command and option key to be meta key
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta
          mac-option-modifier 'meta))

  ;; (when (eq system-type 'gnu/linux)
  ;; (setq  x-meta-keysym 'super
  ;;       x-super-keysym 'meta))

#+end_src
*** Global UTF-8
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
*** Cursor
Turn off the blinking cursor
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src
*** Display column
#+begin_src emacs-lisp
  (column-number-mode t)
#+end_src
*** remove macOS black border                                         :@os:
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src

** Common packages
*** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
*** Restart emacs
#+begin_src emacs-lisp
  (use-package restart-emacs
    :ensure t)
#+end_src
*** Diminish
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src
*** Show command log
#+begin_src emacs-lisp
  (use-package command-log-mode
    :ensure t)
#+end_src
*** Suggest next key
Suggest next keys to me based on currently entered key combination.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode 1)
    :config
    (which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-side-window-max-width 0.33
          which-key-idle-delay 2
          which-key-show-early-on-C-h t
          which-key-idle-secondary-delay 0.05)
    :diminish
    which-key-mode)
#+end_src

** Welcome dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/ownCloud/Photos/emacs-banner.png")
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (registers . 5))))
#+end_src
** Winner mode
#+begin_src emacs-lisp
  (use-package winner-mode
    :ensure nil
    :hook (after-init . winner-mode))
#+end_src
** Pop win
#+begin_src emacs-lisp
  (use-package popwin
    :ensure t
    :config
    (global-set-key (kbd "M-p") popwin:keymap))
#+end_src
** Mini frame
Place minibuffer at the top of the current frame
#+begin_src emacs-lisp
  (use-package mini-frame
    :ensure t
    :config
    (custom-set-variables
     '(mini-frame-show-parameters
       '((top . 10)
         (width . 0.7)
         (left . 0.5)))))
#+end_src
** Transpose frame
#+begin_src emacs-lisp
  (use-package transpose-frame
    :ensure t)
#+end_src
** Uniquify
#+begin_src emacs-lisp
  (use-package uniquify
    :config
    (setq uniquify-buffer-name-style 'reverse)
    (setq uniquify-separator " • ")
    (setq uniquify-after-kill-buffer-p t)
    (setq uniquify-ignore-buffers-re "^\\*"))
#+end_src
* Edit
** Basics
*** CRUX
=crux= is a list of useful functions.

#+begin_src emacs-lisp
  (use-package crux
    :ensure t
    :bind (("C-a" . crux-move-beginning-of-line)
           ("C-S-d" . crux-duplicate-current-line-or-region)
           ("C-c r" . crux-rename-file-and-buffer)
           ("C-c D" . crux-delete-file-and-buffer)))
#+end_src
*** Hungry Delete
hungry delete can make life easier, but emacs-smart-hungry-delete is more powerful

#+begin_src emacs-lisp
  (use-package smart-hungry-delete
    :ensure t
    :bind (("<backspace>" . smart-hungry-delete-backward-char)
           ("C-d" . smart-hungry-delete-forward-char))
    :defer nil ;; dont defer so we can add our functions to hooks
    :config (smart-hungry-delete-add-default-hooks))
#+end_src
*** Trailing Whitespace
I *never* want whitespace at the end of lines. Remove it on save.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

*** Better undo
=undo-tree= visualises undo history as a tree for easy navigation.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode 1))
#+END_SRC
*** Capslock
#+begin_src emacs-lisp
  (use-package caps-lock
    :ensure t)
#+end_src
*** Delete region when typing
#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src
*** Tabs and indent
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)
#+end_src

Don't count two spaces after a period as the end of a sentence.
Just one space is needed.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
 #+end_src
** Command completion
=ivy= is a generic completion framework which uses the minibuffer.
Turning on =ivy-mode= with fuzzy support enables replacement of lots of built in =ido= functionality.

#+begin_src emacs-lisp
  (use-package smex
    :ensure t)
  (use-package ivy
    :ensure t
    :config
    (ivy-mode t))
#+end_src

=counsel= is a collection of =ivy= enhanced versions of common Emacs commands.
I haven't bound much as =ivy-mode= takes care of most things.

#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-x" . counsel-M-x))
    :config
     (setq ivy-re-builders-alist
           '(
             ;; no need to support fuzzy when use swiper and ivy-switch-buffer
             (ivy-switch-buffer . ivy--regex-plus)
             (swiper . ivy--regex-plus)
             (t . ivy--regex-fuzzy)
             ))
    (setq ivy-initial-inputs-alist nil))
#+end_src

=swiper= is an =ivy= enhanced version of isearch.

#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("M-s" . swiper)))
#+end_src

=hydra= presents menus for =ivy= commands.

#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)

  (use-package ivy-hydra
    :after (ivy hydra))
#+end_src

** Easier selection
=expand-region= expands the region around the cursor semantically depending on mode.
Hard to describe but a killer feature.

#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+end_src

** Toggle quotes                                                   :@script:
#+begin_src emacs-lisp
  (defun toggle-quotes ()
    "Toggle single quoted string to double or vice versa, and
    flip the internal quotes as well.  Best to run on the first
    character of the string."
    (interactive)
    (save-excursion
      (re-search-backward "[\"']")
      (let* ((start (point))
             (old-c (char-after start))
             new-c)
        (setq new-c
              (case old-c
                (?\" "'")
                (?\' "\"")))
        (setq old-c (char-to-string old-c))
        (delete-char 1)
        (insert new-c)
        (re-search-forward old-c)
        (backward-char 1)
        (let ((end (point)))
          (delete-char 1)
          (insert new-c)
          (replace-string new-c old-c nil (1+ start) end)))))
#+end_src
** Wrap region
#+begin_src emacs-lisp
  (use-package wrap-region
    :ensure t
    :diminish wrap-region-mode
    :config
    (wrap-region-global-mode t)
    (wrap-region-add-wrapper "~" "~" nil 'org-mode)  ; code
    (wrap-region-add-wrapper "*" "*" nil 'org-mode)  ; bold
    (wrap-region-add-wrapper "/" "/" nil 'org-mode)  ; italic
    (wrap-region-add-wrapper "+" "+" nil 'org-mode)  ; strikethrough
    (wrap-region-add-wrapper "_" "_" nil 'org-mode)) ; verbatim
#+end_src
** Move line up and down
M-<up> M-<down> to move line up and down
#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t
    :diminish drag-stuff-mode
    :config
    (drag-stuff-global-mode t)
    (drag-stuff-define-keys))
#+end_src
** Folding
#+begin_src emacs-lisp
  ;;https://github.com/Schnouki/dotfiles/blob/master/emacs/init-20-dev.el#L90
  (use-package origami
    :ensure t
    :commands origami-mode
    :bind (:map origami-mode-map
                ("C-: :" . origami-recursively-toggle-node)
                ("C-: a" . origami-toggle-all-nodes)
                ("C-: t" . origami-toggle-node)
                ("C-: o" . origami-show-only-node)
                ("C-: u" . origami-undo)
                ("C-: U" . origami-redo)
                ("C-: C-r" . origami-reset)
                ))
#+end_src
** Align                                                           :@script:
#+begin_src emacs-lisp
  (defun align-non-space (BEG END)
    "Align non-space columns in region BEG END."
    (interactive "r")
    (align-regexp BEG END "\\(\\s-*\\)\\S-+" 1 1 t))
#+end_src
** Tab bar
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :ensure t
    :init
    (setq centaur-tabs-set-icons t)
    (setq ccentaur-tabs-set-modified-marker t
          centaur-tabs-modified-marker "M"
          centaur-tabs-cycle-scope 'tabs)
    (setq centaur-tabs-set-close-button nil)
    :config
    (centaur-tabs-group-by-projectile-project)
    )
#+end_src
** Dired                                                           :@script:
preview file
#+begin_src emacs-lisp
  (define-minor-mode dired-follow-mode
    "Diplay file at point in dired after a move."
    :lighter " dired-f"
    :global t
    (if dired-follow-mode (advice-add 'dired-next-line
                                      :after (lambda (arg)
                                               (dired-display-file)))
      (advice-remove 'dired-next-line (lambda (arg)
                                        (dired-display-file)))))
#+end_src

dired hacks
#+begin_src emacs-lisp
  (use-package dired-rainbow
    :ensure t
    :config
    (progn
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
      ))
#+end_src
** Multiple cursors
#+begin_src emacs-lisp
  (use-package iedit
    :ensure t)
  (use-package multiple-cursors
    :ensure t
    :config
    (global-unset-key (kbd "M-<down-mouse-1>"))
    (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this))
#+end_src
** Window Navigation
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 5.0)))))
    :bind
    ("M-o" . ace-window))
#+end_src
** Wgrep
wgrep allows you to edit a grep buffer and apply those changes to the file buffer like sed interactively.
No need to learn sed script, just learn Emacs.
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t)
#+end_src
** Find file in cursor                                             :@script:
#+begin_src emacs-lisp
  (defun teddy-ma/find-file-under-cursor ()
    "Check it the filepath under cursor is an absolute path otherwise open helm and insert the filepath."
    (interactive)
    (let ((file-path (thing-at-point 'filename t)))
      (if (file-name-absolute-p file-path)
          (find-file-at-point file-path)
        (minibuffer-with-setup-hook (lambda ()
                                      (insert file-path))
          (helm-ls-git-ls)))))
#+end_src
** Goto line                                                       :@script:
Temporarily display line number when call go to line function
#+begin_src emacs-lisp
  (global-set-key [remap goto-line] 'goto-line-with-feedback)

  (defun goto-line-with-feedback ()
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive)
    (unwind-protect
        (progn
          (display-line-numbers-mode 1)
          (goto-line (read-number "Goto line: ")))
      (display-line-numbers-mode -1)))
#+end_src
but avy-goto-line is awesome too
** Edit indirect
like buffer narrow but in other buffer
#+begin_src emacs-lisp
  (use-package edit-indirect
    :ensure t)
#+end_src
** Diff hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :hook
    ((magit-pre-refresh . diff-hl-magit-pre-refresh)
     (magit-post-refresh . diff-hl-magit-post-refresh))
    :init
    (setq diff-hl-draw-borders nil)
    ;; (setq diff-hl-global-modes '(not org-mode))
    ;; (setq diff-hl-fringe-bmp-function 'diff-hl-fringe-bmp-from-type)
    ;; (setq diff-hl-global-modes (not '(image-mode org-mode)))
    :config
    (global-diff-hl-mode)
    )
#+end_src
** Praise the sun
#+begin_src emacs-lisp
  (use-package solaire-mode
    :ensure t
    :hook (after-init . solaire-global-mode))
#+end_src
* Appearance
** Font                                                            :@script:
It works fine with windows and org table in Chinese

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq fonts '("Monaco" "STKaiti"))
    (set-face-attribute 'default nil :font
                        (format "%s:pixelsize=%d" (car fonts) 15))
    (setq face-font-rescale-alist '(("STKaiti". 1.2))))

  (when (eq system-type 'windows-nt)
    (setq fonts '("Inconsolata" "华文楷体"))
    (set-face-attribute 'default nil :font
                        (format "%s:pixelsize=%d" (car fonts) 20))
    (setq face-font-rescale-alist '(("华文楷体". 1.0))))

  (when (eq system-type 'gnu/linux)
    (setq fonts '("Inconsolata" "STKaiti"))
    (set-face-attribute 'default nil :font
                        (format "%s:pixelsize=%d" (car fonts) 18))
    (setq face-font-rescale-alist '(("STKaiti". 1.0))))

  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset
                      (font-spec :family (car (cdr fonts)))))

#+end_src

Add emoji support. This is useful when working with html.
#+begin_src emacs-lisp
  (use-package emojify
    :ensure t)
#+end_src

** Emoji and icons
Run M-x all-the-icons-install-fonts for the first time

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :config
    (set-fontset-font t 'symbol "Apple Color Emoji")
    (set-fontset-font t 'symbol "Noto Color Emoji" nil 'append)
    (set-fontset-font t 'symbol "Segoe UI Emoji" nil 'append)
    (set-fontset-font t 'symbol "Symbola" nil 'append))
#+end_src
** Mode Line                                                       :@script:
Hide mode line if necessary

#+begin_src emacs-lisp
  (use-package hide-mode-line
    :ensure t
    :config
    (hide-mode-line-mode 1))
#+end_src

In case I want to see all the minor modes

#+begin_src emacs-lisp
  (use-package manage-minor-mode
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package nyan-mode
    :ensure t
    :init
    (setq nyan-animate-nyancat t)
    (setq nyan-wavy-trail t)
    (setq nyan-minimum-window-width 80)
    (setq nyan-bar-length 20)
    (nyan-mode)
    )
#+end_src

Custom mode line unitlity functions (align)
https://gist.github.com/fhdhsni/990cba7794b4b6918afea94af0b30d66
#+begin_src emacs-lisp
  (setq teddy-ma/current-mode-line-index 1)
  (setq teddy-ma/mode-line-options `(
                                          ""
                                          (eval `mode-line-modes)
                                          (teddy-ma/render-cyan)
                                          ))
  (setq teddy-ma/mode-line-content "")

  (defun teddy-ma/toggle-mode-line-left-display()
    (interactive)
    (let (
          (idx (% teddy-ma/current-mode-line-index (length teddy-ma/mode-line-options)))
          ;; other variable
          )
      (setq teddy-ma/mode-line-content (eval (nth idx teddy-ma/mode-line-options)))
      )
    (setq teddy-ma/current-mode-line-index (+ teddy-ma/current-mode-line-index 1))
    (teddy-ma/refresh-mode-line)
    )

  (defun teddy-ma/render-mode-line-modes()
    teddy-ma/mode-line-content)

  (defun mode-line-fill-right (face reserve)
    "Return empty space using FACE and leaving RESERVE space on the right."
    (unless reserve
      (setq reserve 20))
    (when (and window-system (eq 'right (get-scroll-bar-mode)))
      (setq reserve (- reserve 3)))
    (propertize " "
                'display `((space :align-to (- (+ right right-fringe right-margin) ,reserve)))
                'face face))

  (defun mode-line-fill-center (face reserve)
    "Return empty space using FACE to the center of remaining space leaving RESERVE space on the right."
    (unless reserve
      (setq reserve 20))
    (when (and window-system (eq 'right (get-scroll-bar-mode)))
      (setq reserve (- reserve 3)))
    (propertize " "
                'display `((space :align-to (- (+ center (.5 . right-margin)) ,reserve
                                               (.5 . left-margin))))
                'face face))

  (defconst RIGHT_PADDING 1)

  (defun reserve-left/middle ()
    (/ (length (format-mode-line mode-line-align-middle)) 2))

  (defun reserve-middle/right ()
    (+ RIGHT_PADDING (length (format-mode-line mode-line-align-right))))
#+end_src

Setup Model Line content
#+begin_src emacs-lisp
  (defun teddy-ma/refresh-middle-mode-line ()
    (setq mode-line-align-middle ;; git status, modified status
          '(""
            (vc-mode vc-mode)
            "%3 "
            (:eval
             (when (eql (buffer-modified-p) t)
               ;; propertize adds metadata to text, so you can add colours and formatting, amongst other things
               (propertize "" 'face '(:foreground "black"))))
            " "
            (:eval
             (when (eql buffer-read-only t)
               (propertize "" 'face '(:foreground "pink"))))
            "")))

  (defun teddy-ma/refresh-right-mode-line ()
    (setq mode-line-align-right ;; line number and point location
          '(""
            mode-line-misc-info
            "%2 "
            (:eval (format "%%l/%d : %%c " (line-number-at-pos (point-max))))))
    )

  (defun teddy-ma/refresh-left-mode-line ()
    (setq mode-line-align-left ;; buffer name
          '(
            ""
            "%2 "
            (:propertize "%b" face mode-line-buffer-id) ;; buffer name
            "%2 "
            ;;mode-line-modes
            )))
#+end_src

Toggle mode line modes content which is too verbose sometimes
#+begin_src emacs-lisp
  (defun teddy-ma/render-cyan()
    '(:eval (list (nyan-create)))
    )

  (defun teddy-ma/refresh-mode-line ()
    (teddy-ma/refresh-left-mode-line)
    (teddy-ma/refresh-middle-mode-line)
    (teddy-ma/refresh-right-mode-line)
    (setq-default mode-line-format
                  (list
                   (teddy-ma/render-mode-line-modes)

                   mode-line-align-left '(:eval (mode-line-fill-center 'mode-line (reserve-left/middle)))
                   mode-line-align-middle '(:eval (mode-line-fill-right 'mode-line (reserve-middle/right)))
                   mode-line-align-right
                   ))
    )

  ;;(teddy-ma/render-mode-line-modes)
  ;;(teddy-ma/toggle-mode-line-modes)
  (teddy-ma/refresh-mode-line)
#+end_src

** Theme                                                           :@script:
https://github.com/ogdenwebb/emacs-kaolin-themes

#+begin_src emacs-lisp
  (use-package kaolin-themes
    :ensure t)
#+end_src

toggle theme (dark and light)
#+begin_src emacs-lisp
  (setq-default custom-enabled-themes '(kaolin-light))

  (defun reapply-themes ()
    "Forcibly load the themes listed in `custom-enabled-themes'."
    (dolist (theme custom-enabled-themes)
      (unless (custom-theme-p theme)
        (load-theme theme)))
    (custom-set-variables `(custom-enabled-themes (quote ,custom-enabled-themes))))

  (add-hook 'after-init-hook 'reapply-themes)

  (defun light ()
    "Activate a light color theme."
    (interactive)
    (setq custom-enabled-themes '(kaolin-light))
    (reapply-themes))

  (defun dark ()
    "Activate a dark color theme."
    (interactive)
    (setq custom-enabled-themes '(kaolin-dark))
    (reapply-themes))
#+end_src

fix org block style https://stackoverflow.com/questions/44811679/orgmode-change-code-block-background-color

#+begin_src emacs-lisp
  (custom-set-faces
   '(org-block-begin-line
     ((t (:underline nil :foreground "#60a83d" :background nil))))
   '(org-block-end-line
     ((t (:overline nil :foreground nil :background nil))))

   '(org-block ((t (:background nil))))
   )
#+end_src

** Transparency
Not work when macOS FullScreen

#+begin_src emacs-lisp
  (defun increase-transparency ()
    "Increase Transparency"
    (interactive)
    (seethru-relative 10))

  (defun decrease-transparency ()
    "Decrease Transparency"
    (interactive)
    (seethru-relative -10))

  (use-package seethru
    :ensure t
    :bind
    (("C-c 9" . increase-transparency)
     ("C-c 8" . decrease-transparency))
    :config
    (seethru 95))
#+end_src

** Misc
*** Highlight Indent guides

#+begin_src emacs-lisp
  (use-package indent-guide
    :ensure t)
  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :init
    ;; (setq highlight-indent-guides-method 'column)
    (setq highlight-indent-guides-method 'bitmap)
    ;; (setq highlight-indent-guides-character ?|)
    ;; (setq highlight-indent-guides-character ?❚)
    ;;(setq highlight-indent-guides-character ?‖)
    ;; (setq highlight-indent-guides-responsive 'stack)
    ;;(setq highlight-indent-guides-responsive 'top)
    ;; (setq highlight-indent-guides-auto-enabled nil)
    ;; (set-face-background 'highlight-indent-guides-odd-face "darkgray")
    ;; (set-face-background 'highlight-indent-guides-even-face "dimgray")
    ;; (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
    )
#+end_src
*** Light follow cursor
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+end_src

*** Display battery
#+begin_src emacs-lisp
  ;; (display-battery-mode 1)
  ;; (setq battery-mode-line-format "[%b%p%% %t]")
#+end_src
*** Dired icons
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src
*** Info colors
#+begin_src emacs-lisp
  (use-package info-colors
    :ensure t
    :config
    (add-hook 'Info-selection-hook 'info-colors-fontify-node))
#+end_src

* Programming
** LSP
lsp mode

#+begin_src emacs-lisp
  (use-package gnu-elpa-keyring-update
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (require 'cc-mode)
  (use-package projectile
    :ensure t
    :config
    (setq projectile-mode-line-function '(lambda () (format " Proj[%s]" (projectile-project-name)))))
  (use-package yasnippet
    :ensure t)
  (use-package lsp-mode
    :ensure t)
  (use-package hydra
    :ensure t)
  (use-package lsp-ui
    :ensure t)
#+end_src
** Interface improvements
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

When programming I like my editor to try to help me with keeping parentheses balanced.
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish
    smartparens-mode
    :hook
    (after-prog-mode . smartparens-mode))
#+end_src

Highlight parens etc. for improved readability.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

Highlight strings which represent colours. I only want this in programming modes, and I don't want colour names to be highlighted (=x-colors=).
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config
    (setq rainbow-x-colors nil))
#+end_src

Keep things indented correctly for me.
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t)
#+end_src

Support editorconfig config file.
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :diminish editorconfig-mode
    :config
    (editorconfig-mode 1))
#+end_src

Format all
#+begin_src emacs-lisp
  (use-package format-all
    :ensure t)
#+end_src

underscore -> UPCASE -> CamelCase conversion of names
#+begin_src emacs-lisp
  (use-package string-inflection
    :ensure t)
#+end_src

Expand parentheses for me.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

Smart dash guesses _ vs - depending on context.
#+begin_src emacs-lisp
  (use-package smart-dash
    :ensure t
    :config
    (add-hook 'python-mode-hook 'smart-dash-mode))
#+end_src

** Project management
Projectile handles folders which are in version control.
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-enable-caching t)
    (projectile-mode))
#+end_src

Add some extra completion options via integration with =counsel=. In particular this enables =C-c p SPC= for smart buffer / file search, and =C-c p s s= for search via =ag=.
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (add-hook 'after-init-hook 'counsel-projectile-mode)
    (global-set-key (kbd "C-c p f") 'counsel-git))
#+end_src

Integration with Helm
#+begin_src emacs-lisp
  (use-package helm
    :ensure t)

  (use-package helm-ag
    :ensure t)

  (use-package helm-projectile
    :ensure t
    :config
    (global-set-key (kbd "C-S-f") 'helm-projectile-ag))
#+end_src

Integration with neotree
 modified version of https://github.com/hemmvm/dotemacs/blob/master/site-lisp/util--neotree.el
#+begin_src emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (defun neotree-project-tree-open ()
      (interactive)
      (let ((project-dir (ignore-errors (projectile-project-root)))
            (file-name (buffer-file-name)))
        (if project-dir
            (progn
              (neotree-dir project-dir)
              (neotree-find file-name))
          (neotree-find)))
      (neo-global--select-window))

    (defun neotree-project-tree-toggle ()
      (interactive)
      (if (neo-global--window-exists-p)
          (neotree-hide)
        (neotree-project-tree-open)))

    (global-set-key (kbd "C-<tab>") 'neotree-project-tree-toggle)

    (setq neo-show-hidden-files t)
    (setq neo-theme 'arrow)
    (setq neo-window-width 35)

    (defun custom-neotree-enter-hide ()
      (interactive)
      (neotree-enter)
      (let ((current (neo-buffer--get-filename-current-line)))
        (if (not (and current (file-accessible-directory-p current)))
            (neotree-hide))))

    (defun custom-neotree-peek ()
      (interactive)
      (let ((neo-window (neo-global--get-window)))
        (neotree-enter)
        (select-window neo-window)))

    (add-hook
     'neotree-mode-hook
     (lambda ()
       (define-key neotree-mode-map (kbd "RET") 'custom-neotree-enter-hide)))

    (add-hook
     'neotree-mode-hook
     (lambda ()
       (define-key neotree-mode-map (kbd "TAB") 'custom-neotree-peek))))

#+end_src
** Fuzzy search
=fzf= is a fuzzy file finder which is very quick.
#+begin_src emacs-lisp
  (use-package fzf
    :ensure t)
#+end_src
** Deadgrep
You can now edit files directly from results buffers with M-x deadgrep-edit-mode.
#+begin_src emacs-lisp
  (use-package deadgrep
    :ensure t)
#+end_src
** Open File with Line Number                                      :@script:
Open files and goto lines like we see from g++ etc. i.e. Gemfile:12

#+begin_src emacs-lisp
  (defadvice find-file (around find-file-line-number
                               (filename &optional wildcards)
                               activate)
    "Turn files like file.cpp:14 into file.cpp and going to the 14-th line."
    (save-match-data
      (let* ((matched (string-match "^\\(.*\\):\\([0-9]+\\):?$" filename))
             (line-number (and matched
                               (match-string 2 filename)
                               (string-to-number (match-string 2 filename))))
             (filename (if matched (match-string 1 filename) filename)))
        ad-do-it
        (when line-number
          ;; goto-line is for interactive use
          (goto-char (point-min))
          (forward-line (1- line-number))))))
#+end_src
** Jump to source
Individual language packages often support IDE features like jump to source, but =dumb-jump= attempts to support many languages by simple searching.
It's quite effective even with dynamic libraries like JS and Python.

#+begin_src emacs-lisp
  (use-package dumb-jump
    :ensure t
    :diminish dumb-jump-mode
    :bind (("C-M-g" . dumb-jump-go)
           ("C-M-p" . dumb-jump-back)
           ("C-M-q" . dumb-jump-quick-look)))
#+end_src

** Git
Magit is an awesome interface to git. Summon it with `C-x g`.
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (add-hook 'magit-mode-hook (lambda () (magit-delta-mode +1)))
    :bind ("C-x g" . magit-status))
#+end_src

Display line changes in gutter based on git history. Enable it everywhere.
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode 't))
#+end_src

Magit Delta
#+begin_src emacs-lisp
  (use-package magit-delta
    :ensure t)
#+end_src

TimeMachine lets us step through the history of a file as recorded in git.
#+begin_src emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+end_src

bind =M-p -= to list all git repos in some folder
#+begin_src emacs-lisp
(setq magit-repository-directories '(("\~/code" . 4)))

(defun magit-status-with-prefix-arg ()
  "Call `magit-status` with a prefix."
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively #'magit-status)))

(global-set-key (kbd "M-p p") 'magit-status-with-prefix-arg)
#+end_src
** Syntax checking
=Flycheck= is a general syntax highlighting framework which other packages hook into. It's an improvment on the built in =flymake=.

Setup is pretty simple - we just enable globally and turn on a custom eslint function, and also add a custom checker for proselint.

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-flycheck-mode)
    (add-to-list 'flycheck-checkers 'proselint)
    (setq-default flycheck-highlighting-mode 'lines)
    ;; Define fringe indicator / warning levels
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00011100
              #b00111110
              #b00111110
              #b00111110
              #b00011100
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))
    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error)
    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning)
    (flycheck-define-error-level 'info
      :severity 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-info))
#+end_src
** Autocomplete
Company mode provides good autocomplete options. Perhaps I should add company-quickhelp for documentation (https://github.com/expez/company-quickhelp)?
It would also be good to improve integration with yasnippet as I don't feel I'm making the best use there.
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode)

    (setq company-idle-delay t)

    (use-package company-anaconda
      :ensure t
      :config
      (add-to-list 'company-backends 'company-anaconda)))
#+end_src

I don't want suggestions from open files / buffers to be automatically lowercased as these are often camelcase function names.

#+begin_src emacs-lisp
  (setq company-dabbrev-downcase nil)
#+end_src
** Snippets
Type the shortcut and press =TAB= to complete, or =M-/= to autosuggest a snippet.

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (yas-global-mode 1)
    (global-set-key (kbd "M-/") 'company-yasnippet))

  ;;http://ergoemacs.org/emacs/yasnippet_templates_howto.html
  (use-package yasnippet-snippets
    :ensure t)
#+end_src

* Language
** Javascript
In JS indent to 2 spaces.
#+begin_src emacs-lisp
  (setq-default js-indent-level 2)
#+end_src

JS2 mode improves on the built in JS mode.
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :config
    (setq-default js2-ignored-warnings '("msg.extra.trailing.comma")))
#+end_src

=js2-refactor= supports some useful refactoring options and builds on top of =js2-mode=.
#+begin_src emacs-lisp
  (use-package js2-refactor
    :ensure t
    :config
    (js2r-add-keybindings-with-prefix "C-c C-m")
    :hook
    (after-js-mode . js-refactor-mode))
#+end_src

RJSX mode makes JSX work well.
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :ensure t)
#+end_src

Prettier-js autoformats JS code - much like `gofmt` - and we hook it into JS2 and RJSX modes.
#+begin_src emacs-lisp
  (use-package prettier-js
    :ensure t
    :config
    (setq prettier-js-args '(
                             "--trailing-comma" "es5"
                             "--single-quote" "true"
                             "--print-width" "100"
                             ))
    :hook
    (after-js2-mode . prettier-js-mode)
    (after-rjsx-mode . prettier-js-mode))
#+end_src
** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src
** Toml
#+begin_src emacs-lisp
  (use-package toml-mode
    :ensure t)
#+end_src
** Markdown
Markdown support isn't built into Emacs, add it with =markdown-mode=.
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t)
#+end_src
** Haskell
Install haskell mode.
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t)
#+end_src

Code formatting is easier with =hindent=.
#+begin_src emacs-lisp
  (use-package hindent
    :ensure t)
#+end_src

** Elixir
Elixir highlighting is not built into emacs at present. Elixir-mode gives all the usual niceties, and alchemist improves interaction with tools like =iex=, =mix= and =elixir-format=.

#+begin_src emacs-lisp
  (use-package elixir-mode
    :ensure t)
  (use-package alchemist
    :ensure t)
#+end_src
** Ruby
#+begin_src emacs-lisp
  (use-package rake
    :ensure t)

  (use-package robe
    :ensure t
    :diminish
    :hook
    (after-ruby-mode . robe-mode))

  (use-package ruby-hash-syntax
    :ensure t
    :diminish
    :hook
    (after-ruby-mode . ruby-hash-syntax))

  (use-package rubocop
    :ensure t
    :diminish
    :hook
    (after-ruby-mode . rubocop-mode))

  (use-package haml-mode
    :ensure t)

  (use-package minitest
    :ensure t)
#+end_src
** Rails
#+begin_src emacs-lisp
  (defun run-rails-test-at-point ()
    (interactive)
    (compile (format "bundle exec rails test %s:%s" (expand-file-name (buffer-file-name))  (line-number-at-pos))))

  (defun run-rails-test-file ()
    (interactive)
    (compile (format "bundle exec rails test %s" (expand-file-name (buffer-file-name)))))
#+end_src
** C
Emacs has a great built in C/C++ mode, but we can improve on it with =irony-mode= for code completion via =libclang=.

#+begin_src emacs-lisp
  (use-package irony
    :ensure t
    :hook (c-mode . irony-mode))
#+end_src

Add company mode support.
#+begin_src emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))
#+end_src

Add flycheck support.
#+begin_src emacs-lisp
  (use-package flycheck-irony
    :ensure t
    :hook (flycheck-mode . flycheck-irony-setup))
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t )
#+end_src
** Web mode                                                     :@dependent:
Web mode handles html/css/js.
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.html\\'" . web-mode)
           ("\\.erb\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2))
#+end_src

Web beautify prettifies html / css / js using js-beautify - install with =npm install -g js-beautify=.
#+begin_src emacs-lisp
  (use-package web-beautify
    :ensure t
    :bind (:map web-mode-map
                ("C-c b" . web-beautify-html)
                :map js2-mode-map
                ("C-c b" . web-beautify-js)))
#+end_src

HTML preview
#+begin_src emacs-lisp
  (use-package impatient-mode
    :ensure t)
#+end_src
* Org
** General settings.
https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf

#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :diminish org-indent-mode
    :config
    (setq org-startup-indented 'f)
    (setq org-special-ctrl-a/e 't)
    (setq org-startup-folded t)
    (setq org-hide-emphasis-markers nil)
    (setq org-src-tab-acts-natively t)
    (setq org-src-fontify-natively t)
    (setq org-src-window-setup 'current-window)
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "Chromium")
    (setq org-file-apps
          '((auto-mode . emacs)
            ("\\.x?html?\\'" . "Chromium %s")))
    (setq org-ellipsis " ▾")
    ;; org-ellipsis not shown in heading when git-gutter-fringe-mode is active
    ;; https://lccambiaghi.github.io/vanilla-emacs/readme.html#org948c5b0
    ;; org-ellipsis "⤵"
    ;; org-ellipsis "▼"
    ;; org-ellipsis "..."
    ;;  org-ellipsis " ↴
    (add-hook 'org-mode-hook (lambda ()
                               "Beautify Org Checkbox Symbol"
                               (push '("[ ]" . "☐" ) prettify-symbols-alist)
                               (push '("[X]" . "☑" ) prettify-symbols-alist)
                               (push '("[-]" . "❍" ) prettify-symbols-alist)
                               (prettify-symbols-mode))))

  ;; (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "»") ("#+END_SRC" . "«")("#+begin_src" . "»") ("#+end_src" . "«") ("lambda"  . "λ") ("->" . "→") ("->>" . "↠")))
#+end_src

** Easy open common files
use ~C+x r j~ to jump to register, http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/

#+begin_src emacs-lisp
  (set-register ?b (cons 'file "~/Documents/org/blog.org"))
  (set-register ?t (cons 'file "~/Documents/org/todo.org"))
  (set-register ?n (cons 'file "~/Documents/org/note.org"))
  (set-register ?r (cons 'file "~/Documents/org/roam/index.org"))
#+end_src
** Org bullets
#+begin_src emacs-lisp
   (use-package org-bullets
     :ensure t
     :hook (org-mode . org-bullets-mode))
#+end_src
** Center org buffers
#+begin_src emacs-lisp
  (defun teddy-ma/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . teddy-ma/org-mode-visual-fill))
#+end_src
** Task todo stages
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO" "DOING" "|" "DONE" "BLOCKED")))

  (use-package hl-todo
    :ensure t
    :hook ((prog-mode org-mode) . teddy-ma/hl-todo-init)
    :init
    (defun teddy-ma/hl-todo-init ()
      (setq-local hl-todo-keyword-faces '(("TODO" . "#ff9977")
                                          ("DOING" . "#ffcc0c")
                                          ("DONE" . "#44bc44")
                                          ("BLOCKED" . "#003366")
                                          ))
      (hl-todo-mode))
    )
#+end_src

** Drag and drop images
#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :config
    (setq-default org-download-image-dir "~/Documents/org/assets/images")
    (setq-default org-download-timestamp "")
    (setq-default org-download-heading-lvl nil)
    (add-hook 'dired-mode-hook 'org-download-enable))
#+end_src

** Export
Do not inlclude default style since custom css will handle it

#+begin_src emacs-lisp
  (setq org-html-head-include-default-style nil
        org-html-htmlize-output-type 'css)

  ;; (use-package ox-gfm
  ;;   :ensure t
  ;;   :after ox
  ;;   :config
  ;;   (custom-set-variables '(org-export-initial-scope 'subtree)
  ;;                         '(org-export-with-toc nil)
  ;;                         '(org-export-headline-levels 4)))
#+end_src
** Babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (js .t )
     (lua .t )
     (shell . t)
     (plantuml . t)))
#+end_src
** Reveal.js
#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (setq org-reveal-mathjax t))
#+end_src
** Org Tree Slide
C-x-n-s and C-x-n-w can narrow to subtree

#+begin_src emacs-lisp
  (use-package org-tree-slide
    :ensure t
    :custom
    (org-image-actual-width nil))
#+end_src

** Plantuml
#+begin_src emacs-lisp
  ;;https://www.onwebsecurity.com/configuration/use-emacs-to-create-oauth-2-0-uml-sequence-diagrams.html
  ;; tell org-mode where to find the plantuml JAR file (specify the JAR file)
  (setq org-plantuml-jar-path (expand-file-name "/usr/local/Cellar/plantuml/1.2021.4/libexec/plantuml.jar"))

  ;; automatically show the resulting image
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+end_src
** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :diminish org-roam-mode
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Documents/org/roam/")
    (org-roam-db-update-method 'immediate)
    (org-roam-completion-system 'ivy)
    :bind
    (:map org-roam-mode-map
          (("C-c n l" . org-roam)
           ("C-c n f" . org-roam-find-file)
           ("C-c n g" . org-roam-graph))
          :map org-mode-map
          (("C-c n i" . org-roam-insert))
          (("C-c n I" . org-roam-insert-immediate))))
#+end_src

server

#+begin_src emacs-lisp
  (use-package org-roam-server
    :ensure t
    :config
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8686
          org-roam-server-authenticate nil
          org-roam-server-export-inline-images t
          org-roam-server-serve-files nil
          org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
          org-roam-server-network-poll t
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20))
#+end_src
** Capture
#+begin_src emacs-lisp
  (use-package org-capture
    :bind ("C-c c" . org-capture)
    :after org
    :config
    (add-to-list 'org-capture-templates
                 '("t" "Todo"  entry
                   (file "~/Documents/org/refile.org")
                   "* TODO %?" :empty-lines 0))

    (add-to-list 'org-capture-templates
                 '("n" "Note" entry
                   (file "~/Documents/org/refile.org")
                   "* %?" :empty-lines 0)))
#+end_src
** Agenda
Interactive agenda in the console https://github.com/rougier/agenda

#+begin_src emacs-lisp
  (use-package org-agenda
    :bind ("C-c a" . org-agenda)
    :config
    (add-to-list 'org-agenda-files "~/Documents/org/todo.org"))
#+end_src
* Extras
** Writing
=writegood-mode= highlights bad word choices and has functions for calculating readability.

#+begin_src emacs-lisp
  (use-package writegood-mode
    :ensure t
    :bind ("C-c g" . writegood-mode)
    :config
    (add-to-list 'writegood-weasel-words "actionable"))

  (abbrev-mode t)
  ;; ~/.emacs.d/abbrev_defs
#+end_src

need aspell to ispell (brew install aspell)
#+begin_src emacs-lisp
  (setq ispell-program-name "aspell")
#+end_src

Proselint is a syntax checker for English language. This defines a custom checker which will run in texty modes.
Proselint is an external program, install it with =pip install proselint= for this to work.

#+begin_src emacs-lisp
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))
#+end_src

** Pinyin                                                       :@dependent:
#+begin_src emacs-lisp
  (use-package posframe
    :ensure t)

  (use-package pyim
    :ensure t
    :demand t
    :config
    ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
    (use-package pyim-basedict
      :ensure t
      :config (pyim-basedict-enable))

    (setq default-input-method "pyim")

    ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
    ;; 我自己使用的中英文动态切换规则是：
    ;; 1. 光标只有在注释里面时，才可以输入中文。
    ;; 2. 光标前是汉字字符时，才能输入中文。
    ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
    (setq-default pyim-english-input-switch-functions
                  '(pyim-probe-dynamic-english
                    pyim-probe-isearch-mode
                    pyim-probe-program-mode
                    pyim-probe-org-structure-template))

    (setq-default pyim-punctuation-half-width-functions
                  '(pyim-probe-punctuation-line-beginning
                    pyim-probe-punctuation-after-punctuation))

    ;; 开启拼音搜索功能
    ;;(pyim-isearch-mode 1)

    ;; 使用 pupup-el 来绘制选词框, 如果用 emacs26, 建议设置
    ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
    ;; 手动安装 posframe 包。
    (setq pyim-page-tooltip 'posframe)

    ;; 选词框显示5个候选词
    (setq pyim-page-length 5)

    :bind
    (("M-j" . pyim-convert-code-at-point) ;与 pyim-probe-dynamic-english 配合
     ("M-;" . pyim-delete-word-from-personal-buffer)))
#+end_src
** PlantUML                                                     :@dependent:
need plantuml (brew install plantuml)
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (use-package plantuml-mode
      :ensure t)
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2021.0/libexec/plantuml.jar"))
#+END_SRC
** Dictionary
#+begin_src emacs-lisp
  (use-package youdao-dictionary
    :ensure t
    :config
    (setq url-automatic-caching t))
#+end_src
** Disk Usage
#+begin_src emacs-lisp
  (use-package disk-usage
    :ensure t)
#+end_src

** Shell
eshell with git
#+begin_src emacs-lisp
  (use-package eshell-git-prompt
    :ensure t)
  (use-package eshell
    :ensure t
    :config
    (eshell-git-prompt-use-theme 'powerline))
#+end_src

vterm
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (setq vterm-shell (executable-find "fish")
          vterm-max-scrollback 10000))

  (use-package vterm-toggle
    :ensure t)
#+end_src
